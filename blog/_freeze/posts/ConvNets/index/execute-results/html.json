{
  "hash": "2416bac30cf7fa1bf3cc5ce1dc322dcd",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Convolutional Neural Networks from Scratch\nauthor: Kartikeya Khare\ndate: 'March 6, 2024'\nformat:\n  html:\n    toc: true\n    toc-title: Contents\n    toc-location: left\n---\n\nThis blog post is a code-first introduction to Convolutional Networks (ConvNets). We will build our own ConvNet from scratch and understand the fundamentals of how and why they work so well, particularly for image processing tasks.\n\nNB: This blog uses some functions from the [little_ai](https://github.com/darkknightxi/little_ai) library I am currently building.   \n\n# Importing Libraries\n\n::: {#d26c21bd .cell execution_count=1}\n``` {.python .cell-code}\nimport torch\nfrom torch import nn\n\nfrom torch.utils.data import default_collate\nfrom typing import Mapping\n\nfrom little_ai.training import *\nfrom little_ai.datasets import *\n```\n:::\n\n\n::: {#2455800b .cell execution_count=2}\n``` {.python .cell-code}\nimport pickle,gzip,math,os,time,shutil,torch,matplotlib as mpl, numpy as np\nimport pandas as pd,matplotlib.pyplot as plt\nfrom pathlib import Path\nfrom urllib.request import urlretrieve\nfrom torch import tensor\nimport torch.nn.functional as F\nfrom torch import optim\n\nfrom torch.utils.data import DataLoader\nfrom typing import Mapping\n```\n:::\n\n\n::: {#bae9d97a .cell execution_count=3}\n``` {.python .cell-code}\nmpl.rcParams['image.cmap'] = 'gray'\n```\n:::\n\n\n::: {#e530051f .cell execution_count=4}\n``` {.python .cell-code}\nMNIST_URL='https://github.com/mnielsen/neural-networks-and-deep-learning/blob/master/data/mnist.pkl.gz?raw=true'\npath_data = Path('data')\npath_data.mkdir(exist_ok=True)\npath_gz = path_data/'mnist.pkl.gz'\nif not path_gz.exists(): urlretrieve(MNIST_URL, path_gz)\nwith gzip.open(path_gz, 'rb') as f: ((x_train, y_train), (x_valid, y_valid), _) = pickle.load(f, encoding='latin-1')\nx_train, y_train, x_valid, y_valid = map(tensor, [x_train, y_train, x_valid, y_valid])\n```\n:::\n\n\n# Why ConvNets\n\n<img src = \"attachment:1f733cfc-7a1b-4790-bbb2-99c62257ccd8.png\">\n> Figure 1: A simple neural net with two hidden layers\n\nImages have properties that necessitate the need for specialized architectures.\n\n- They are high-dimensional. RGB images of dimensions $224\\times224$ are very common (i.e., $150, 528$ input dimensions). Hidden layers in fully connected networks are generally larger than the input size, so even for a shallow network, the number of weights would exceed $150,528^2$ or $22$ billion. This poses obvious practical problems in terms of the required training data, memory, and computation.\n- Nearby image pixels are statistically related. However, fully connected networks have no notion of \"nearby\" and treat the relation between every input equally.\n- The interpretation of an image is stable under geometric transformations. An image of a tree is still an image of a tree if we shift it leftwards by a few pixels. However, this shift is stable under geometric transformations. Hence, a fully connected model must learn the patterns of pixels that signify a tree separately at every position, which is inefficient.\n\nConvolutional layers process each local image region independently, using parameters shared across the whole image. They use fewer parameters than fully connected layers, exploit the spatial relationships between nearby pixels, and don't have to re-learn the interpretation of pixels at every position.\n\n<img src=\"attachment:526f7c71-95ca-46c6-a220-522ec88abb91.png\">\n> Figure 2: Architecture of a simple ConvNet\n\n# Convolution Operation\n\nConvolutional layers perform the convolution operation using kernels (or filters) which is simply a matrix, over an image. Convolution is a simple mathematical operation that involves addition and multiplication.\n\n![Convolution Operation](attachment:29eb9b7e-7f1e-4809-b209-e6b1ce37a4a6.png)\n\n> Figure 3: Convolution operation using a $2\\times2$ kernel over a $3\\times4$ image that results in a $2\\times3$ output matrix. The kernel slides over the image, adding the products of the overlapping matrix values. Source: [Deep Learning](https://www.deeplearningbook.org) by Goodfellow, et al.\n\nNow, let's implement our own convolution operation using numpy.\nWe'll choose an image from the training set and create a simple $3\\times 3$ matrix as our kernel and, as we'll see,  the convolution operation with the right choice of the kernel will be able to identify some pattern in our image.\n\n::: {#ab8333e5 .cell execution_count=5}\n``` {.python .cell-code}\nx_imgs = x_train.view(-1, 28, 28)\nxv_imgs = x_valid.view(-1, 28, 28)\n```\n:::\n\n\n::: {#19942c0f .cell execution_count=6}\n``` {.python .cell-code}\nmpl.rcParams['figure.dpi'] = 30\n```\n:::\n\n\n::: {#ee7ca615 .cell execution_count=7}\n``` {.python .cell-code}\nim3 = x_imgs[7]\nshow_image(im3);\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-8-output-1.png){}\n:::\n:::\n\n\nLet's create a simple $3\\times3$ kernel (people in the computer vision world call it a kernel; essentially it's just a tensor). \n\nNB: Actually, the values of kernels are not entered manually but are learned as parameters during training. \n\n::: {#6bec162d .cell execution_count=8}\n``` {.python .cell-code}\ntop_edge = tensor([[-1, -1, -1], \n                  [0, 0, 0], \n                  [1, 1, 1]]).float()\n```\n:::\n\n\n::: {#b26e4133 .cell execution_count=9}\n``` {.python .cell-code}\nshow_image(top_edge, noframe=False);\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-10-output-1.png){}\n:::\n:::\n\n\nThis kernel will slide along all the $3\\times 3$ windows in our images and compute the convolutions. \nIf  $3\\times 3$` window looks like this:\n\n$$\\begin{matrix} a & b & c \\\\ d & e & f \\\\ g & h & i\\end{matrix}$$\n\nthen the result will be $-a -b -c +g+h+i$\n\n::: {#765c4fbc .cell execution_count=10}\n``` {.python .cell-code}\ndf = pd.DataFrame(im3[:13,:23])\ndf.style.format(precision=2).set_properties(**{'font-size':'7pt'}).background_gradient('Greys')\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<style type=\"text/css\">\n#T_43c55_row0_col0, #T_43c55_row0_col1, #T_43c55_row0_col2, #T_43c55_row0_col3, #T_43c55_row0_col4, #T_43c55_row0_col5, #T_43c55_row0_col6, #T_43c55_row0_col7, #T_43c55_row0_col8, #T_43c55_row0_col9, #T_43c55_row0_col10, #T_43c55_row0_col11, #T_43c55_row0_col12, #T_43c55_row0_col13, #T_43c55_row0_col14, #T_43c55_row0_col15, #T_43c55_row0_col16, #T_43c55_row0_col17, #T_43c55_row0_col18, #T_43c55_row0_col19, #T_43c55_row0_col20, #T_43c55_row0_col21, #T_43c55_row0_col22, #T_43c55_row1_col0, #T_43c55_row1_col1, #T_43c55_row1_col2, #T_43c55_row1_col3, #T_43c55_row1_col4, #T_43c55_row1_col5, #T_43c55_row1_col6, #T_43c55_row1_col7, #T_43c55_row1_col8, #T_43c55_row1_col9, #T_43c55_row1_col10, #T_43c55_row1_col11, #T_43c55_row1_col12, #T_43c55_row1_col13, #T_43c55_row1_col14, #T_43c55_row1_col15, #T_43c55_row1_col16, #T_43c55_row1_col17, #T_43c55_row1_col18, #T_43c55_row1_col19, #T_43c55_row1_col20, #T_43c55_row1_col21, #T_43c55_row1_col22, #T_43c55_row2_col0, #T_43c55_row2_col1, #T_43c55_row2_col2, #T_43c55_row2_col3, #T_43c55_row2_col4, #T_43c55_row2_col5, #T_43c55_row2_col6, #T_43c55_row2_col7, #T_43c55_row2_col8, #T_43c55_row2_col9, #T_43c55_row2_col10, #T_43c55_row2_col11, #T_43c55_row2_col12, #T_43c55_row2_col13, #T_43c55_row2_col14, #T_43c55_row2_col15, #T_43c55_row2_col16, #T_43c55_row2_col17, #T_43c55_row2_col18, #T_43c55_row2_col19, #T_43c55_row2_col20, #T_43c55_row2_col21, #T_43c55_row2_col22, #T_43c55_row3_col0, #T_43c55_row3_col1, #T_43c55_row3_col2, #T_43c55_row3_col3, #T_43c55_row3_col4, #T_43c55_row3_col5, #T_43c55_row3_col6, #T_43c55_row3_col7, #T_43c55_row3_col8, #T_43c55_row3_col9, #T_43c55_row3_col10, #T_43c55_row3_col11, #T_43c55_row3_col12, #T_43c55_row3_col13, #T_43c55_row3_col14, #T_43c55_row3_col15, #T_43c55_row3_col16, #T_43c55_row3_col17, #T_43c55_row3_col18, #T_43c55_row3_col19, #T_43c55_row3_col20, #T_43c55_row3_col21, #T_43c55_row3_col22, #T_43c55_row4_col0, #T_43c55_row4_col1, #T_43c55_row4_col2, #T_43c55_row4_col3, #T_43c55_row4_col4, #T_43c55_row4_col5, #T_43c55_row4_col6, #T_43c55_row4_col7, #T_43c55_row4_col8, #T_43c55_row4_col9, #T_43c55_row4_col10, #T_43c55_row4_col11, #T_43c55_row4_col12, #T_43c55_row4_col13, #T_43c55_row4_col14, #T_43c55_row4_col15, #T_43c55_row4_col16, #T_43c55_row4_col17, #T_43c55_row4_col18, #T_43c55_row4_col19, #T_43c55_row4_col20, #T_43c55_row4_col21, #T_43c55_row4_col22, #T_43c55_row5_col0, #T_43c55_row5_col1, #T_43c55_row5_col2, #T_43c55_row5_col3, #T_43c55_row5_col4, #T_43c55_row5_col5, #T_43c55_row5_col6, #T_43c55_row5_col7, #T_43c55_row5_col8, #T_43c55_row5_col9, #T_43c55_row5_col10, #T_43c55_row5_col22, #T_43c55_row6_col0, #T_43c55_row6_col1, #T_43c55_row6_col2, #T_43c55_row6_col3, #T_43c55_row6_col4, #T_43c55_row6_col5, #T_43c55_row6_col6, #T_43c55_row6_col7, #T_43c55_row6_col8, #T_43c55_row7_col0, #T_43c55_row7_col1, #T_43c55_row7_col2, #T_43c55_row7_col3, #T_43c55_row7_col4, #T_43c55_row7_col5, #T_43c55_row7_col6, #T_43c55_row7_col7, #T_43c55_row7_col8, #T_43c55_row8_col0, #T_43c55_row8_col1, #T_43c55_row8_col2, #T_43c55_row8_col3, #T_43c55_row8_col4, #T_43c55_row8_col5, #T_43c55_row8_col6, #T_43c55_row8_col7, #T_43c55_row8_col8, #T_43c55_row9_col0, #T_43c55_row9_col1, #T_43c55_row9_col2, #T_43c55_row9_col3, #T_43c55_row9_col4, #T_43c55_row9_col5, #T_43c55_row9_col6, #T_43c55_row9_col7, #T_43c55_row9_col8, #T_43c55_row9_col13, #T_43c55_row9_col14, #T_43c55_row9_col15, #T_43c55_row9_col16, #T_43c55_row10_col0, #T_43c55_row10_col1, #T_43c55_row10_col2, #T_43c55_row10_col3, #T_43c55_row10_col4, #T_43c55_row10_col5, #T_43c55_row10_col6, #T_43c55_row10_col7, #T_43c55_row10_col8, #T_43c55_row10_col9, #T_43c55_row10_col10, #T_43c55_row10_col11, #T_43c55_row10_col12, #T_43c55_row10_col13, #T_43c55_row10_col14, #T_43c55_row10_col15, #T_43c55_row10_col16, #T_43c55_row10_col22, #T_43c55_row11_col0, #T_43c55_row11_col1, #T_43c55_row11_col2, #T_43c55_row11_col3, #T_43c55_row11_col4, #T_43c55_row11_col5, #T_43c55_row11_col6, #T_43c55_row11_col7, #T_43c55_row11_col8, #T_43c55_row11_col9, #T_43c55_row11_col10, #T_43c55_row11_col11, #T_43c55_row11_col12, #T_43c55_row11_col13, #T_43c55_row11_col14, #T_43c55_row11_col15, #T_43c55_row11_col22, #T_43c55_row12_col0, #T_43c55_row12_col1, #T_43c55_row12_col2, #T_43c55_row12_col3, #T_43c55_row12_col4, #T_43c55_row12_col5, #T_43c55_row12_col6, #T_43c55_row12_col7, #T_43c55_row12_col8, #T_43c55_row12_col9, #T_43c55_row12_col10, #T_43c55_row12_col11, #T_43c55_row12_col12, #T_43c55_row12_col13, #T_43c55_row12_col22 {\n  font-size: 7pt;\n  background-color: #ffffff;\n  color: #000000;\n}\n#T_43c55_row5_col11 {\n  font-size: 7pt;\n  background-color: #ececec;\n  color: #000000;\n}\n#T_43c55_row5_col12 {\n  font-size: 7pt;\n  background-color: #e8e8e8;\n  color: #000000;\n}\n#T_43c55_row5_col13 {\n  font-size: 7pt;\n  background-color: #b0b0b0;\n  color: #000000;\n}\n#T_43c55_row5_col14, #T_43c55_row5_col15, #T_43c55_row5_col16, #T_43c55_row5_col17, #T_43c55_row5_col18, #T_43c55_row5_col19, #T_43c55_row6_col13, #T_43c55_row6_col20, #T_43c55_row7_col9, #T_43c55_row7_col10, #T_43c55_row7_col11, #T_43c55_row7_col12, #T_43c55_row7_col13, #T_43c55_row7_col20, #T_43c55_row7_col21, #T_43c55_row7_col22, #T_43c55_row8_col10, #T_43c55_row8_col11, #T_43c55_row8_col20, #T_43c55_row8_col21, #T_43c55_row8_col22, #T_43c55_row9_col20, #T_43c55_row10_col20, #T_43c55_row11_col20 {\n  font-size: 7pt;\n  background-color: #000000;\n  color: #f1f1f1;\n}\n#T_43c55_row5_col20 {\n  font-size: 7pt;\n  background-color: #626262;\n  color: #f1f1f1;\n}\n#T_43c55_row5_col21 {\n  font-size: 7pt;\n  background-color: #fcfcfc;\n  color: #000000;\n}\n#T_43c55_row6_col9 {\n  font-size: 7pt;\n  background-color: #dbdbdb;\n  color: #000000;\n}\n#T_43c55_row6_col10 {\n  font-size: 7pt;\n  background-color: #878787;\n  color: #f1f1f1;\n}\n#T_43c55_row6_col11 {\n  font-size: 7pt;\n  background-color: #212121;\n  color: #f1f1f1;\n}\n#T_43c55_row6_col12 {\n  font-size: 7pt;\n  background-color: #1e1e1e;\n  color: #f1f1f1;\n}\n#T_43c55_row6_col14, #T_43c55_row7_col14 {\n  font-size: 7pt;\n  background-color: #020202;\n  color: #f1f1f1;\n}\n#T_43c55_row6_col15, #T_43c55_row6_col16, #T_43c55_row6_col17, #T_43c55_row6_col18, #T_43c55_row6_col19, #T_43c55_row7_col15, #T_43c55_row7_col16, #T_43c55_row7_col17, #T_43c55_row7_col18, #T_43c55_row7_col19, #T_43c55_row8_col18, #T_43c55_row8_col19, #T_43c55_row9_col19, #T_43c55_row10_col19, #T_43c55_row11_col18, #T_43c55_row11_col19, #T_43c55_row12_col17, #T_43c55_row12_col18, #T_43c55_row12_col19 {\n  font-size: 7pt;\n  background-color: #010101;\n  color: #f1f1f1;\n}\n#T_43c55_row6_col21 {\n  font-size: 7pt;\n  background-color: #727272;\n  color: #f1f1f1;\n}\n#T_43c55_row6_col22 {\n  font-size: 7pt;\n  background-color: #dcdcdc;\n  color: #000000;\n}\n#T_43c55_row8_col9 {\n  font-size: 7pt;\n  background-color: #777777;\n  color: #f1f1f1;\n}\n#T_43c55_row8_col12 {\n  font-size: 7pt;\n  background-color: #1a1a1a;\n  color: #f1f1f1;\n}\n#T_43c55_row8_col13 {\n  font-size: 7pt;\n  background-color: #8f8f8f;\n  color: #f1f1f1;\n}\n#T_43c55_row8_col14, #T_43c55_row8_col15, #T_43c55_row8_col16 {\n  font-size: 7pt;\n  background-color: #909090;\n  color: #f1f1f1;\n}\n#T_43c55_row8_col17, #T_43c55_row11_col17 {\n  font-size: 7pt;\n  background-color: #525252;\n  color: #f1f1f1;\n}\n#T_43c55_row9_col9 {\n  font-size: 7pt;\n  background-color: #fdfdfd;\n  color: #000000;\n}\n#T_43c55_row9_col10, #T_43c55_row9_col11, #T_43c55_row9_col22 {\n  font-size: 7pt;\n  background-color: #f1f1f1;\n  color: #000000;\n}\n#T_43c55_row9_col12 {\n  font-size: 7pt;\n  background-color: #f4f4f4;\n  color: #000000;\n}\n#T_43c55_row9_col17, #T_43c55_row11_col21 {\n  font-size: 7pt;\n  background-color: #f8f8f8;\n  color: #000000;\n}\n#T_43c55_row9_col18 {\n  font-size: 7pt;\n  background-color: #1f1f1f;\n  color: #f1f1f1;\n}\n#T_43c55_row9_col21 {\n  font-size: 7pt;\n  background-color: #646464;\n  color: #f1f1f1;\n}\n#T_43c55_row10_col17 {\n  font-size: 7pt;\n  background-color: #c5c5c5;\n  color: #000000;\n}\n#T_43c55_row10_col18 {\n  font-size: 7pt;\n  background-color: #0c0c0c;\n  color: #f1f1f1;\n}\n#T_43c55_row10_col21 {\n  font-size: 7pt;\n  background-color: #828282;\n  color: #f1f1f1;\n}\n#T_43c55_row11_col16 {\n  font-size: 7pt;\n  background-color: #c3c3c3;\n  color: #000000;\n}\n#T_43c55_row12_col14 {\n  font-size: 7pt;\n  background-color: #c1c1c1;\n  color: #000000;\n}\n#T_43c55_row12_col15 {\n  font-size: 7pt;\n  background-color: #323232;\n  color: #f1f1f1;\n}\n#T_43c55_row12_col16 {\n  font-size: 7pt;\n  background-color: #070707;\n  color: #f1f1f1;\n}\n#T_43c55_row12_col20 {\n  font-size: 7pt;\n  background-color: #3c3c3c;\n  color: #f1f1f1;\n}\n#T_43c55_row12_col21 {\n  font-size: 7pt;\n  background-color: #fbfbfb;\n  color: #000000;\n}\n</style>\n<table id=\"T_43c55\">\n  <thead>\n    <tr>\n      <th class=\"blank level0\" >&nbsp;</th>\n      <th id=\"T_43c55_level0_col0\" class=\"col_heading level0 col0\" >0</th>\n      <th id=\"T_43c55_level0_col1\" class=\"col_heading level0 col1\" >1</th>\n      <th id=\"T_43c55_level0_col2\" class=\"col_heading level0 col2\" >2</th>\n      <th id=\"T_43c55_level0_col3\" class=\"col_heading level0 col3\" >3</th>\n      <th id=\"T_43c55_level0_col4\" class=\"col_heading level0 col4\" >4</th>\n      <th id=\"T_43c55_level0_col5\" class=\"col_heading level0 col5\" >5</th>\n      <th id=\"T_43c55_level0_col6\" class=\"col_heading level0 col6\" >6</th>\n      <th id=\"T_43c55_level0_col7\" class=\"col_heading level0 col7\" >7</th>\n      <th id=\"T_43c55_level0_col8\" class=\"col_heading level0 col8\" >8</th>\n      <th id=\"T_43c55_level0_col9\" class=\"col_heading level0 col9\" >9</th>\n      <th id=\"T_43c55_level0_col10\" class=\"col_heading level0 col10\" >10</th>\n      <th id=\"T_43c55_level0_col11\" class=\"col_heading level0 col11\" >11</th>\n      <th id=\"T_43c55_level0_col12\" class=\"col_heading level0 col12\" >12</th>\n      <th id=\"T_43c55_level0_col13\" class=\"col_heading level0 col13\" >13</th>\n      <th id=\"T_43c55_level0_col14\" class=\"col_heading level0 col14\" >14</th>\n      <th id=\"T_43c55_level0_col15\" class=\"col_heading level0 col15\" >15</th>\n      <th id=\"T_43c55_level0_col16\" class=\"col_heading level0 col16\" >16</th>\n      <th id=\"T_43c55_level0_col17\" class=\"col_heading level0 col17\" >17</th>\n      <th id=\"T_43c55_level0_col18\" class=\"col_heading level0 col18\" >18</th>\n      <th id=\"T_43c55_level0_col19\" class=\"col_heading level0 col19\" >19</th>\n      <th id=\"T_43c55_level0_col20\" class=\"col_heading level0 col20\" >20</th>\n      <th id=\"T_43c55_level0_col21\" class=\"col_heading level0 col21\" >21</th>\n      <th id=\"T_43c55_level0_col22\" class=\"col_heading level0 col22\" >22</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th id=\"T_43c55_level0_row0\" class=\"row_heading level0 row0\" >0</th>\n      <td id=\"T_43c55_row0_col0\" class=\"data row0 col0\" >0.00</td>\n      <td id=\"T_43c55_row0_col1\" class=\"data row0 col1\" >0.00</td>\n      <td id=\"T_43c55_row0_col2\" class=\"data row0 col2\" >0.00</td>\n      <td id=\"T_43c55_row0_col3\" class=\"data row0 col3\" >0.00</td>\n      <td id=\"T_43c55_row0_col4\" class=\"data row0 col4\" >0.00</td>\n      <td id=\"T_43c55_row0_col5\" class=\"data row0 col5\" >0.00</td>\n      <td id=\"T_43c55_row0_col6\" class=\"data row0 col6\" >0.00</td>\n      <td id=\"T_43c55_row0_col7\" class=\"data row0 col7\" >0.00</td>\n      <td id=\"T_43c55_row0_col8\" class=\"data row0 col8\" >0.00</td>\n      <td id=\"T_43c55_row0_col9\" class=\"data row0 col9\" >0.00</td>\n      <td id=\"T_43c55_row0_col10\" class=\"data row0 col10\" >0.00</td>\n      <td id=\"T_43c55_row0_col11\" class=\"data row0 col11\" >0.00</td>\n      <td id=\"T_43c55_row0_col12\" class=\"data row0 col12\" >0.00</td>\n      <td id=\"T_43c55_row0_col13\" class=\"data row0 col13\" >0.00</td>\n      <td id=\"T_43c55_row0_col14\" class=\"data row0 col14\" >0.00</td>\n      <td id=\"T_43c55_row0_col15\" class=\"data row0 col15\" >0.00</td>\n      <td id=\"T_43c55_row0_col16\" class=\"data row0 col16\" >0.00</td>\n      <td id=\"T_43c55_row0_col17\" class=\"data row0 col17\" >0.00</td>\n      <td id=\"T_43c55_row0_col18\" class=\"data row0 col18\" >0.00</td>\n      <td id=\"T_43c55_row0_col19\" class=\"data row0 col19\" >0.00</td>\n      <td id=\"T_43c55_row0_col20\" class=\"data row0 col20\" >0.00</td>\n      <td id=\"T_43c55_row0_col21\" class=\"data row0 col21\" >0.00</td>\n      <td id=\"T_43c55_row0_col22\" class=\"data row0 col22\" >0.00</td>\n    </tr>\n    <tr>\n      <th id=\"T_43c55_level0_row1\" class=\"row_heading level0 row1\" >1</th>\n      <td id=\"T_43c55_row1_col0\" class=\"data row1 col0\" >0.00</td>\n      <td id=\"T_43c55_row1_col1\" class=\"data row1 col1\" >0.00</td>\n      <td id=\"T_43c55_row1_col2\" class=\"data row1 col2\" >0.00</td>\n      <td id=\"T_43c55_row1_col3\" class=\"data row1 col3\" >0.00</td>\n      <td id=\"T_43c55_row1_col4\" class=\"data row1 col4\" >0.00</td>\n      <td id=\"T_43c55_row1_col5\" class=\"data row1 col5\" >0.00</td>\n      <td id=\"T_43c55_row1_col6\" class=\"data row1 col6\" >0.00</td>\n      <td id=\"T_43c55_row1_col7\" class=\"data row1 col7\" >0.00</td>\n      <td id=\"T_43c55_row1_col8\" class=\"data row1 col8\" >0.00</td>\n      <td id=\"T_43c55_row1_col9\" class=\"data row1 col9\" >0.00</td>\n      <td id=\"T_43c55_row1_col10\" class=\"data row1 col10\" >0.00</td>\n      <td id=\"T_43c55_row1_col11\" class=\"data row1 col11\" >0.00</td>\n      <td id=\"T_43c55_row1_col12\" class=\"data row1 col12\" >0.00</td>\n      <td id=\"T_43c55_row1_col13\" class=\"data row1 col13\" >0.00</td>\n      <td id=\"T_43c55_row1_col14\" class=\"data row1 col14\" >0.00</td>\n      <td id=\"T_43c55_row1_col15\" class=\"data row1 col15\" >0.00</td>\n      <td id=\"T_43c55_row1_col16\" class=\"data row1 col16\" >0.00</td>\n      <td id=\"T_43c55_row1_col17\" class=\"data row1 col17\" >0.00</td>\n      <td id=\"T_43c55_row1_col18\" class=\"data row1 col18\" >0.00</td>\n      <td id=\"T_43c55_row1_col19\" class=\"data row1 col19\" >0.00</td>\n      <td id=\"T_43c55_row1_col20\" class=\"data row1 col20\" >0.00</td>\n      <td id=\"T_43c55_row1_col21\" class=\"data row1 col21\" >0.00</td>\n      <td id=\"T_43c55_row1_col22\" class=\"data row1 col22\" >0.00</td>\n    </tr>\n    <tr>\n      <th id=\"T_43c55_level0_row2\" class=\"row_heading level0 row2\" >2</th>\n      <td id=\"T_43c55_row2_col0\" class=\"data row2 col0\" >0.00</td>\n      <td id=\"T_43c55_row2_col1\" class=\"data row2 col1\" >0.00</td>\n      <td id=\"T_43c55_row2_col2\" class=\"data row2 col2\" >0.00</td>\n      <td id=\"T_43c55_row2_col3\" class=\"data row2 col3\" >0.00</td>\n      <td id=\"T_43c55_row2_col4\" class=\"data row2 col4\" >0.00</td>\n      <td id=\"T_43c55_row2_col5\" class=\"data row2 col5\" >0.00</td>\n      <td id=\"T_43c55_row2_col6\" class=\"data row2 col6\" >0.00</td>\n      <td id=\"T_43c55_row2_col7\" class=\"data row2 col7\" >0.00</td>\n      <td id=\"T_43c55_row2_col8\" class=\"data row2 col8\" >0.00</td>\n      <td id=\"T_43c55_row2_col9\" class=\"data row2 col9\" >0.00</td>\n      <td id=\"T_43c55_row2_col10\" class=\"data row2 col10\" >0.00</td>\n      <td id=\"T_43c55_row2_col11\" class=\"data row2 col11\" >0.00</td>\n      <td id=\"T_43c55_row2_col12\" class=\"data row2 col12\" >0.00</td>\n      <td id=\"T_43c55_row2_col13\" class=\"data row2 col13\" >0.00</td>\n      <td id=\"T_43c55_row2_col14\" class=\"data row2 col14\" >0.00</td>\n      <td id=\"T_43c55_row2_col15\" class=\"data row2 col15\" >0.00</td>\n      <td id=\"T_43c55_row2_col16\" class=\"data row2 col16\" >0.00</td>\n      <td id=\"T_43c55_row2_col17\" class=\"data row2 col17\" >0.00</td>\n      <td id=\"T_43c55_row2_col18\" class=\"data row2 col18\" >0.00</td>\n      <td id=\"T_43c55_row2_col19\" class=\"data row2 col19\" >0.00</td>\n      <td id=\"T_43c55_row2_col20\" class=\"data row2 col20\" >0.00</td>\n      <td id=\"T_43c55_row2_col21\" class=\"data row2 col21\" >0.00</td>\n      <td id=\"T_43c55_row2_col22\" class=\"data row2 col22\" >0.00</td>\n    </tr>\n    <tr>\n      <th id=\"T_43c55_level0_row3\" class=\"row_heading level0 row3\" >3</th>\n      <td id=\"T_43c55_row3_col0\" class=\"data row3 col0\" >0.00</td>\n      <td id=\"T_43c55_row3_col1\" class=\"data row3 col1\" >0.00</td>\n      <td id=\"T_43c55_row3_col2\" class=\"data row3 col2\" >0.00</td>\n      <td id=\"T_43c55_row3_col3\" class=\"data row3 col3\" >0.00</td>\n      <td id=\"T_43c55_row3_col4\" class=\"data row3 col4\" >0.00</td>\n      <td id=\"T_43c55_row3_col5\" class=\"data row3 col5\" >0.00</td>\n      <td id=\"T_43c55_row3_col6\" class=\"data row3 col6\" >0.00</td>\n      <td id=\"T_43c55_row3_col7\" class=\"data row3 col7\" >0.00</td>\n      <td id=\"T_43c55_row3_col8\" class=\"data row3 col8\" >0.00</td>\n      <td id=\"T_43c55_row3_col9\" class=\"data row3 col9\" >0.00</td>\n      <td id=\"T_43c55_row3_col10\" class=\"data row3 col10\" >0.00</td>\n      <td id=\"T_43c55_row3_col11\" class=\"data row3 col11\" >0.00</td>\n      <td id=\"T_43c55_row3_col12\" class=\"data row3 col12\" >0.00</td>\n      <td id=\"T_43c55_row3_col13\" class=\"data row3 col13\" >0.00</td>\n      <td id=\"T_43c55_row3_col14\" class=\"data row3 col14\" >0.00</td>\n      <td id=\"T_43c55_row3_col15\" class=\"data row3 col15\" >0.00</td>\n      <td id=\"T_43c55_row3_col16\" class=\"data row3 col16\" >0.00</td>\n      <td id=\"T_43c55_row3_col17\" class=\"data row3 col17\" >0.00</td>\n      <td id=\"T_43c55_row3_col18\" class=\"data row3 col18\" >0.00</td>\n      <td id=\"T_43c55_row3_col19\" class=\"data row3 col19\" >0.00</td>\n      <td id=\"T_43c55_row3_col20\" class=\"data row3 col20\" >0.00</td>\n      <td id=\"T_43c55_row3_col21\" class=\"data row3 col21\" >0.00</td>\n      <td id=\"T_43c55_row3_col22\" class=\"data row3 col22\" >0.00</td>\n    </tr>\n    <tr>\n      <th id=\"T_43c55_level0_row4\" class=\"row_heading level0 row4\" >4</th>\n      <td id=\"T_43c55_row4_col0\" class=\"data row4 col0\" >0.00</td>\n      <td id=\"T_43c55_row4_col1\" class=\"data row4 col1\" >0.00</td>\n      <td id=\"T_43c55_row4_col2\" class=\"data row4 col2\" >0.00</td>\n      <td id=\"T_43c55_row4_col3\" class=\"data row4 col3\" >0.00</td>\n      <td id=\"T_43c55_row4_col4\" class=\"data row4 col4\" >0.00</td>\n      <td id=\"T_43c55_row4_col5\" class=\"data row4 col5\" >0.00</td>\n      <td id=\"T_43c55_row4_col6\" class=\"data row4 col6\" >0.00</td>\n      <td id=\"T_43c55_row4_col7\" class=\"data row4 col7\" >0.00</td>\n      <td id=\"T_43c55_row4_col8\" class=\"data row4 col8\" >0.00</td>\n      <td id=\"T_43c55_row4_col9\" class=\"data row4 col9\" >0.00</td>\n      <td id=\"T_43c55_row4_col10\" class=\"data row4 col10\" >0.00</td>\n      <td id=\"T_43c55_row4_col11\" class=\"data row4 col11\" >0.00</td>\n      <td id=\"T_43c55_row4_col12\" class=\"data row4 col12\" >0.00</td>\n      <td id=\"T_43c55_row4_col13\" class=\"data row4 col13\" >0.00</td>\n      <td id=\"T_43c55_row4_col14\" class=\"data row4 col14\" >0.00</td>\n      <td id=\"T_43c55_row4_col15\" class=\"data row4 col15\" >0.00</td>\n      <td id=\"T_43c55_row4_col16\" class=\"data row4 col16\" >0.00</td>\n      <td id=\"T_43c55_row4_col17\" class=\"data row4 col17\" >0.00</td>\n      <td id=\"T_43c55_row4_col18\" class=\"data row4 col18\" >0.00</td>\n      <td id=\"T_43c55_row4_col19\" class=\"data row4 col19\" >0.00</td>\n      <td id=\"T_43c55_row4_col20\" class=\"data row4 col20\" >0.00</td>\n      <td id=\"T_43c55_row4_col21\" class=\"data row4 col21\" >0.00</td>\n      <td id=\"T_43c55_row4_col22\" class=\"data row4 col22\" >0.00</td>\n    </tr>\n    <tr>\n      <th id=\"T_43c55_level0_row5\" class=\"row_heading level0 row5\" >5</th>\n      <td id=\"T_43c55_row5_col0\" class=\"data row5 col0\" >0.00</td>\n      <td id=\"T_43c55_row5_col1\" class=\"data row5 col1\" >0.00</td>\n      <td id=\"T_43c55_row5_col2\" class=\"data row5 col2\" >0.00</td>\n      <td id=\"T_43c55_row5_col3\" class=\"data row5 col3\" >0.00</td>\n      <td id=\"T_43c55_row5_col4\" class=\"data row5 col4\" >0.00</td>\n      <td id=\"T_43c55_row5_col5\" class=\"data row5 col5\" >0.00</td>\n      <td id=\"T_43c55_row5_col6\" class=\"data row5 col6\" >0.00</td>\n      <td id=\"T_43c55_row5_col7\" class=\"data row5 col7\" >0.00</td>\n      <td id=\"T_43c55_row5_col8\" class=\"data row5 col8\" >0.00</td>\n      <td id=\"T_43c55_row5_col9\" class=\"data row5 col9\" >0.00</td>\n      <td id=\"T_43c55_row5_col10\" class=\"data row5 col10\" >0.00</td>\n      <td id=\"T_43c55_row5_col11\" class=\"data row5 col11\" >0.15</td>\n      <td id=\"T_43c55_row5_col12\" class=\"data row5 col12\" >0.17</td>\n      <td id=\"T_43c55_row5_col13\" class=\"data row5 col13\" >0.41</td>\n      <td id=\"T_43c55_row5_col14\" class=\"data row5 col14\" >1.00</td>\n      <td id=\"T_43c55_row5_col15\" class=\"data row5 col15\" >0.99</td>\n      <td id=\"T_43c55_row5_col16\" class=\"data row5 col16\" >0.99</td>\n      <td id=\"T_43c55_row5_col17\" class=\"data row5 col17\" >0.99</td>\n      <td id=\"T_43c55_row5_col18\" class=\"data row5 col18\" >0.99</td>\n      <td id=\"T_43c55_row5_col19\" class=\"data row5 col19\" >0.99</td>\n      <td id=\"T_43c55_row5_col20\" class=\"data row5 col20\" >0.68</td>\n      <td id=\"T_43c55_row5_col21\" class=\"data row5 col21\" >0.02</td>\n      <td id=\"T_43c55_row5_col22\" class=\"data row5 col22\" >0.00</td>\n    </tr>\n    <tr>\n      <th id=\"T_43c55_level0_row6\" class=\"row_heading level0 row6\" >6</th>\n      <td id=\"T_43c55_row6_col0\" class=\"data row6 col0\" >0.00</td>\n      <td id=\"T_43c55_row6_col1\" class=\"data row6 col1\" >0.00</td>\n      <td id=\"T_43c55_row6_col2\" class=\"data row6 col2\" >0.00</td>\n      <td id=\"T_43c55_row6_col3\" class=\"data row6 col3\" >0.00</td>\n      <td id=\"T_43c55_row6_col4\" class=\"data row6 col4\" >0.00</td>\n      <td id=\"T_43c55_row6_col5\" class=\"data row6 col5\" >0.00</td>\n      <td id=\"T_43c55_row6_col6\" class=\"data row6 col6\" >0.00</td>\n      <td id=\"T_43c55_row6_col7\" class=\"data row6 col7\" >0.00</td>\n      <td id=\"T_43c55_row6_col8\" class=\"data row6 col8\" >0.00</td>\n      <td id=\"T_43c55_row6_col9\" class=\"data row6 col9\" >0.17</td>\n      <td id=\"T_43c55_row6_col10\" class=\"data row6 col10\" >0.54</td>\n      <td id=\"T_43c55_row6_col11\" class=\"data row6 col11\" >0.88</td>\n      <td id=\"T_43c55_row6_col12\" class=\"data row6 col12\" >0.88</td>\n      <td id=\"T_43c55_row6_col13\" class=\"data row6 col13\" >0.98</td>\n      <td id=\"T_43c55_row6_col14\" class=\"data row6 col14\" >0.99</td>\n      <td id=\"T_43c55_row6_col15\" class=\"data row6 col15\" >0.98</td>\n      <td id=\"T_43c55_row6_col16\" class=\"data row6 col16\" >0.98</td>\n      <td id=\"T_43c55_row6_col17\" class=\"data row6 col17\" >0.98</td>\n      <td id=\"T_43c55_row6_col18\" class=\"data row6 col18\" >0.98</td>\n      <td id=\"T_43c55_row6_col19\" class=\"data row6 col19\" >0.98</td>\n      <td id=\"T_43c55_row6_col20\" class=\"data row6 col20\" >0.98</td>\n      <td id=\"T_43c55_row6_col21\" class=\"data row6 col21\" >0.62</td>\n      <td id=\"T_43c55_row6_col22\" class=\"data row6 col22\" >0.05</td>\n    </tr>\n    <tr>\n      <th id=\"T_43c55_level0_row7\" class=\"row_heading level0 row7\" >7</th>\n      <td id=\"T_43c55_row7_col0\" class=\"data row7 col0\" >0.00</td>\n      <td id=\"T_43c55_row7_col1\" class=\"data row7 col1\" >0.00</td>\n      <td id=\"T_43c55_row7_col2\" class=\"data row7 col2\" >0.00</td>\n      <td id=\"T_43c55_row7_col3\" class=\"data row7 col3\" >0.00</td>\n      <td id=\"T_43c55_row7_col4\" class=\"data row7 col4\" >0.00</td>\n      <td id=\"T_43c55_row7_col5\" class=\"data row7 col5\" >0.00</td>\n      <td id=\"T_43c55_row7_col6\" class=\"data row7 col6\" >0.00</td>\n      <td id=\"T_43c55_row7_col7\" class=\"data row7 col7\" >0.00</td>\n      <td id=\"T_43c55_row7_col8\" class=\"data row7 col8\" >0.00</td>\n      <td id=\"T_43c55_row7_col9\" class=\"data row7 col9\" >0.70</td>\n      <td id=\"T_43c55_row7_col10\" class=\"data row7 col10\" >0.98</td>\n      <td id=\"T_43c55_row7_col11\" class=\"data row7 col11\" >0.98</td>\n      <td id=\"T_43c55_row7_col12\" class=\"data row7 col12\" >0.98</td>\n      <td id=\"T_43c55_row7_col13\" class=\"data row7 col13\" >0.98</td>\n      <td id=\"T_43c55_row7_col14\" class=\"data row7 col14\" >0.99</td>\n      <td id=\"T_43c55_row7_col15\" class=\"data row7 col15\" >0.98</td>\n      <td id=\"T_43c55_row7_col16\" class=\"data row7 col16\" >0.98</td>\n      <td id=\"T_43c55_row7_col17\" class=\"data row7 col17\" >0.98</td>\n      <td id=\"T_43c55_row7_col18\" class=\"data row7 col18\" >0.98</td>\n      <td id=\"T_43c55_row7_col19\" class=\"data row7 col19\" >0.98</td>\n      <td id=\"T_43c55_row7_col20\" class=\"data row7 col20\" >0.98</td>\n      <td id=\"T_43c55_row7_col21\" class=\"data row7 col21\" >0.98</td>\n      <td id=\"T_43c55_row7_col22\" class=\"data row7 col22\" >0.23</td>\n    </tr>\n    <tr>\n      <th id=\"T_43c55_level0_row8\" class=\"row_heading level0 row8\" >8</th>\n      <td id=\"T_43c55_row8_col0\" class=\"data row8 col0\" >0.00</td>\n      <td id=\"T_43c55_row8_col1\" class=\"data row8 col1\" >0.00</td>\n      <td id=\"T_43c55_row8_col2\" class=\"data row8 col2\" >0.00</td>\n      <td id=\"T_43c55_row8_col3\" class=\"data row8 col3\" >0.00</td>\n      <td id=\"T_43c55_row8_col4\" class=\"data row8 col4\" >0.00</td>\n      <td id=\"T_43c55_row8_col5\" class=\"data row8 col5\" >0.00</td>\n      <td id=\"T_43c55_row8_col6\" class=\"data row8 col6\" >0.00</td>\n      <td id=\"T_43c55_row8_col7\" class=\"data row8 col7\" >0.00</td>\n      <td id=\"T_43c55_row8_col8\" class=\"data row8 col8\" >0.00</td>\n      <td id=\"T_43c55_row8_col9\" class=\"data row8 col9\" >0.43</td>\n      <td id=\"T_43c55_row8_col10\" class=\"data row8 col10\" >0.98</td>\n      <td id=\"T_43c55_row8_col11\" class=\"data row8 col11\" >0.98</td>\n      <td id=\"T_43c55_row8_col12\" class=\"data row8 col12\" >0.90</td>\n      <td id=\"T_43c55_row8_col13\" class=\"data row8 col13\" >0.52</td>\n      <td id=\"T_43c55_row8_col14\" class=\"data row8 col14\" >0.52</td>\n      <td id=\"T_43c55_row8_col15\" class=\"data row8 col15\" >0.52</td>\n      <td id=\"T_43c55_row8_col16\" class=\"data row8 col16\" >0.52</td>\n      <td id=\"T_43c55_row8_col17\" class=\"data row8 col17\" >0.74</td>\n      <td id=\"T_43c55_row8_col18\" class=\"data row8 col18\" >0.98</td>\n      <td id=\"T_43c55_row8_col19\" class=\"data row8 col19\" >0.98</td>\n      <td id=\"T_43c55_row8_col20\" class=\"data row8 col20\" >0.98</td>\n      <td id=\"T_43c55_row8_col21\" class=\"data row8 col21\" >0.98</td>\n      <td id=\"T_43c55_row8_col22\" class=\"data row8 col22\" >0.23</td>\n    </tr>\n    <tr>\n      <th id=\"T_43c55_level0_row9\" class=\"row_heading level0 row9\" >9</th>\n      <td id=\"T_43c55_row9_col0\" class=\"data row9 col0\" >0.00</td>\n      <td id=\"T_43c55_row9_col1\" class=\"data row9 col1\" >0.00</td>\n      <td id=\"T_43c55_row9_col2\" class=\"data row9 col2\" >0.00</td>\n      <td id=\"T_43c55_row9_col3\" class=\"data row9 col3\" >0.00</td>\n      <td id=\"T_43c55_row9_col4\" class=\"data row9 col4\" >0.00</td>\n      <td id=\"T_43c55_row9_col5\" class=\"data row9 col5\" >0.00</td>\n      <td id=\"T_43c55_row9_col6\" class=\"data row9 col6\" >0.00</td>\n      <td id=\"T_43c55_row9_col7\" class=\"data row9 col7\" >0.00</td>\n      <td id=\"T_43c55_row9_col8\" class=\"data row9 col8\" >0.00</td>\n      <td id=\"T_43c55_row9_col9\" class=\"data row9 col9\" >0.02</td>\n      <td id=\"T_43c55_row9_col10\" class=\"data row9 col10\" >0.11</td>\n      <td id=\"T_43c55_row9_col11\" class=\"data row9 col11\" >0.11</td>\n      <td id=\"T_43c55_row9_col12\" class=\"data row9 col12\" >0.09</td>\n      <td id=\"T_43c55_row9_col13\" class=\"data row9 col13\" >0.00</td>\n      <td id=\"T_43c55_row9_col14\" class=\"data row9 col14\" >0.00</td>\n      <td id=\"T_43c55_row9_col15\" class=\"data row9 col15\" >0.00</td>\n      <td id=\"T_43c55_row9_col16\" class=\"data row9 col16\" >0.00</td>\n      <td id=\"T_43c55_row9_col17\" class=\"data row9 col17\" >0.05</td>\n      <td id=\"T_43c55_row9_col18\" class=\"data row9 col18\" >0.88</td>\n      <td id=\"T_43c55_row9_col19\" class=\"data row9 col19\" >0.98</td>\n      <td id=\"T_43c55_row9_col20\" class=\"data row9 col20\" >0.98</td>\n      <td id=\"T_43c55_row9_col21\" class=\"data row9 col21\" >0.67</td>\n      <td id=\"T_43c55_row9_col22\" class=\"data row9 col22\" >0.03</td>\n    </tr>\n    <tr>\n      <th id=\"T_43c55_level0_row10\" class=\"row_heading level0 row10\" >10</th>\n      <td id=\"T_43c55_row10_col0\" class=\"data row10 col0\" >0.00</td>\n      <td id=\"T_43c55_row10_col1\" class=\"data row10 col1\" >0.00</td>\n      <td id=\"T_43c55_row10_col2\" class=\"data row10 col2\" >0.00</td>\n      <td id=\"T_43c55_row10_col3\" class=\"data row10 col3\" >0.00</td>\n      <td id=\"T_43c55_row10_col4\" class=\"data row10 col4\" >0.00</td>\n      <td id=\"T_43c55_row10_col5\" class=\"data row10 col5\" >0.00</td>\n      <td id=\"T_43c55_row10_col6\" class=\"data row10 col6\" >0.00</td>\n      <td id=\"T_43c55_row10_col7\" class=\"data row10 col7\" >0.00</td>\n      <td id=\"T_43c55_row10_col8\" class=\"data row10 col8\" >0.00</td>\n      <td id=\"T_43c55_row10_col9\" class=\"data row10 col9\" >0.00</td>\n      <td id=\"T_43c55_row10_col10\" class=\"data row10 col10\" >0.00</td>\n      <td id=\"T_43c55_row10_col11\" class=\"data row10 col11\" >0.00</td>\n      <td id=\"T_43c55_row10_col12\" class=\"data row10 col12\" >0.00</td>\n      <td id=\"T_43c55_row10_col13\" class=\"data row10 col13\" >0.00</td>\n      <td id=\"T_43c55_row10_col14\" class=\"data row10 col14\" >0.00</td>\n      <td id=\"T_43c55_row10_col15\" class=\"data row10 col15\" >0.00</td>\n      <td id=\"T_43c55_row10_col16\" class=\"data row10 col16\" >0.00</td>\n      <td id=\"T_43c55_row10_col17\" class=\"data row10 col17\" >0.33</td>\n      <td id=\"T_43c55_row10_col18\" class=\"data row10 col18\" >0.95</td>\n      <td id=\"T_43c55_row10_col19\" class=\"data row10 col19\" >0.98</td>\n      <td id=\"T_43c55_row10_col20\" class=\"data row10 col20\" >0.98</td>\n      <td id=\"T_43c55_row10_col21\" class=\"data row10 col21\" >0.56</td>\n      <td id=\"T_43c55_row10_col22\" class=\"data row10 col22\" >0.00</td>\n    </tr>\n    <tr>\n      <th id=\"T_43c55_level0_row11\" class=\"row_heading level0 row11\" >11</th>\n      <td id=\"T_43c55_row11_col0\" class=\"data row11 col0\" >0.00</td>\n      <td id=\"T_43c55_row11_col1\" class=\"data row11 col1\" >0.00</td>\n      <td id=\"T_43c55_row11_col2\" class=\"data row11 col2\" >0.00</td>\n      <td id=\"T_43c55_row11_col3\" class=\"data row11 col3\" >0.00</td>\n      <td id=\"T_43c55_row11_col4\" class=\"data row11 col4\" >0.00</td>\n      <td id=\"T_43c55_row11_col5\" class=\"data row11 col5\" >0.00</td>\n      <td id=\"T_43c55_row11_col6\" class=\"data row11 col6\" >0.00</td>\n      <td id=\"T_43c55_row11_col7\" class=\"data row11 col7\" >0.00</td>\n      <td id=\"T_43c55_row11_col8\" class=\"data row11 col8\" >0.00</td>\n      <td id=\"T_43c55_row11_col9\" class=\"data row11 col9\" >0.00</td>\n      <td id=\"T_43c55_row11_col10\" class=\"data row11 col10\" >0.00</td>\n      <td id=\"T_43c55_row11_col11\" class=\"data row11 col11\" >0.00</td>\n      <td id=\"T_43c55_row11_col12\" class=\"data row11 col12\" >0.00</td>\n      <td id=\"T_43c55_row11_col13\" class=\"data row11 col13\" >0.00</td>\n      <td id=\"T_43c55_row11_col14\" class=\"data row11 col14\" >0.00</td>\n      <td id=\"T_43c55_row11_col15\" class=\"data row11 col15\" >0.00</td>\n      <td id=\"T_43c55_row11_col16\" class=\"data row11 col16\" >0.34</td>\n      <td id=\"T_43c55_row11_col17\" class=\"data row11 col17\" >0.74</td>\n      <td id=\"T_43c55_row11_col18\" class=\"data row11 col18\" >0.98</td>\n      <td id=\"T_43c55_row11_col19\" class=\"data row11 col19\" >0.98</td>\n      <td id=\"T_43c55_row11_col20\" class=\"data row11 col20\" >0.98</td>\n      <td id=\"T_43c55_row11_col21\" class=\"data row11 col21\" >0.05</td>\n      <td id=\"T_43c55_row11_col22\" class=\"data row11 col22\" >0.00</td>\n    </tr>\n    <tr>\n      <th id=\"T_43c55_level0_row12\" class=\"row_heading level0 row12\" >12</th>\n      <td id=\"T_43c55_row12_col0\" class=\"data row12 col0\" >0.00</td>\n      <td id=\"T_43c55_row12_col1\" class=\"data row12 col1\" >0.00</td>\n      <td id=\"T_43c55_row12_col2\" class=\"data row12 col2\" >0.00</td>\n      <td id=\"T_43c55_row12_col3\" class=\"data row12 col3\" >0.00</td>\n      <td id=\"T_43c55_row12_col4\" class=\"data row12 col4\" >0.00</td>\n      <td id=\"T_43c55_row12_col5\" class=\"data row12 col5\" >0.00</td>\n      <td id=\"T_43c55_row12_col6\" class=\"data row12 col6\" >0.00</td>\n      <td id=\"T_43c55_row12_col7\" class=\"data row12 col7\" >0.00</td>\n      <td id=\"T_43c55_row12_col8\" class=\"data row12 col8\" >0.00</td>\n      <td id=\"T_43c55_row12_col9\" class=\"data row12 col9\" >0.00</td>\n      <td id=\"T_43c55_row12_col10\" class=\"data row12 col10\" >0.00</td>\n      <td id=\"T_43c55_row12_col11\" class=\"data row12 col11\" >0.00</td>\n      <td id=\"T_43c55_row12_col12\" class=\"data row12 col12\" >0.00</td>\n      <td id=\"T_43c55_row12_col13\" class=\"data row12 col13\" >0.00</td>\n      <td id=\"T_43c55_row12_col14\" class=\"data row12 col14\" >0.36</td>\n      <td id=\"T_43c55_row12_col15\" class=\"data row12 col15\" >0.83</td>\n      <td id=\"T_43c55_row12_col16\" class=\"data row12 col16\" >0.96</td>\n      <td id=\"T_43c55_row12_col17\" class=\"data row12 col17\" >0.98</td>\n      <td id=\"T_43c55_row12_col18\" class=\"data row12 col18\" >0.98</td>\n      <td id=\"T_43c55_row12_col19\" class=\"data row12 col19\" >0.98</td>\n      <td id=\"T_43c55_row12_col20\" class=\"data row12 col20\" >0.80</td>\n      <td id=\"T_43c55_row12_col21\" class=\"data row12 col21\" >0.04</td>\n      <td id=\"T_43c55_row12_col22\" class=\"data row12 col22\" >0.00</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\nIf we compute the convolution over the $3\\times 3$ window along rows $3$ to $5$ and columns $14$ to $16$ (the top edge of the $3$), the result will be:\n\n::: {#90a7ac50 .cell execution_count=11}\n``` {.python .cell-code}\n(im3[3:6,14:17] * top_edge).sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\ntensor(2.9727)\n```\n:::\n:::\n\n\nSimilarly, doing this in the window made by rows $7, 8, 9$ and columns $14, 15, 16$ (the bottom edge of $3$), we'll get:\n\n::: {#ced3c841 .cell execution_count=12}\n``` {.python .cell-code}\n(im3[7:10, 14:17] * top_edge).sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\ntensor(-2.9570)\n```\n:::\n:::\n\n\nThe positive pixels represent the \"lighter\" pixels and negative values represent the \"darker\" pixels in relative terms. Our kernel should be able to highlight the top edges of $3$ by making the top edges lighter and the bottom edges darker.\n\nNote that to compute the convolutions, we are simply doing numpy's element-wise multiplication followed by a sum.\n\nLet's create a function which will compute the the convolutions over any $3 \\times 3$ window with any $3 \\times 3$ kernel.\n\n::: {#c7c00162 .cell execution_count=13}\n``` {.python .cell-code}\n#row and col define the center coordinate of a 3x3 window\ndef apply_kernel(row, col, kernel): return (im3[row-1:row+2, col-1:col+2] * kernel).sum()\n```\n:::\n\n\n::: {#70c3c0d2 .cell execution_count=14}\n``` {.python .cell-code}\napply_kernel(4, 15, top_edge)\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\ntensor(2.9727)\n```\n:::\n:::\n\n\nNext, we want to slide this kernel over the entire image. To do this, we'll use list comprehension inside a list comprehension to create coordinates over which we want to move.\n\n::: {#bc1e012c .cell execution_count=15}\n``` {.python .cell-code}\nrng = range(1, 27)\ntop_edge3 = tensor([[apply_kernel(i, j, top_edge) for j in rng] for i in rng])\nshow_image(top_edge3);\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-16-output-1.png){}\n:::\n:::\n\n\nOur simple little $3 \\times 3$ kernel has managed to highlight the top edges of the digit $3$ !\n\nHere's a subtle thing that we need to notice.\n\n::: {#4f15dd9b .cell execution_count=16}\n``` {.python .cell-code}\ntop_edge3.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\ntorch.Size([26, 26])\n```\n:::\n:::\n\n\nThe shape of the output image is $26\\times 26$ while the input image had $28\\times 28$ dimensions. It is easy to see why the output dimensions change if we visualize the kernel sliding over all the $3\\times 3$ windows in our input image. In general, if a kernel of dimension $f\\times f$ convolve over an image of dimension $N\\times N$, the output will have dimensions $(N-f+1)\\times (N-f+1)$.\n\nLet's repeat the same exercise using another kernel which should be able to highlight the left edges.\n\n::: {#02362fc3 .cell execution_count=17}\n``` {.python .cell-code}\nleft_edge = tensor([[-1, 0, 1],\n                    [-1, 0, 1],\n                    [-1, 0, 1]]).float()\nshow_image(left_edge, noframe=False);\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-18-output-1.png){}\n:::\n:::\n\n\n::: {#75240d30 .cell execution_count=18}\n``` {.python .cell-code}\nleft_edge3 = tensor([[apply_kernel(i, j, left_edge) for j in rng] for i in rng])\nshow_image(left_edge3);\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-19-output-1.png){}\n:::\n:::\n\n\nAnd it works as expected.\n\n# Convolutions in PyTorch\n\nThe convolutions that we implemented in python above are quite slow.\n\n::: {#ea08ca3b .cell execution_count=19}\n``` {.python .cell-code}\n%timeit -n 1 tensor([[apply_kernel(i, j, left_edge) for j in rng] for i in rng])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n9.26 ms ± 1.59 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n```\n:::\n:::\n\n\nPyTorch has an `Conv2d` class that is optimized for convolutions and offers added features and benefits.\n\n::: {#5543c09a .cell execution_count=20}\n``` {.python .cell-code}\ninp = im3[None,None,:,:].float()\n```\n:::\n\n\n`conv2d` expects the input image to be a rank-four tensor where the dimensions correspond to `batch, channel, height, width` respectively. Since we are only considering a single image, our batch size (first dimension) is one, and we are working with black-and-white images, our images have a single channel. Colored images have three channels: red, green, and blue.  \n\n::: {#e79e2b7f .cell execution_count=21}\n``` {.python .cell-code}\n%timeit -n 100 F.conv2d(inp, left_edge[None,None])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe slowest run took 51.63 times longer than the fastest. This could mean that an intermediate result is being cached.\n188 µs ± 397 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n```\n:::\n:::\n\n\n# Convolutions over a batch of images\n\nWhen training our network, we pass the input images to the models as batches. `conv2d` allows us to conveniently implement the convolutions using multiple kernels simultaneously over a batch of images.\n\nLet's make two more kernels to detect diagnals in the image. \n\n::: {#b5fb0e10 .cell execution_count=22}\n``` {.python .cell-code}\ndiag1_edge = tensor([[ 0,-1, 1],\n                     [-1, 1, 0],\n                     [ 1, 0, 0]]).float()\n```\n:::\n\n\n::: {#19529fd1 .cell execution_count=23}\n``` {.python .cell-code}\nshow_image(diag1_edge, noframe=False);\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-24-output-1.png){}\n:::\n:::\n\n\n::: {#4dae0689 .cell execution_count=24}\n``` {.python .cell-code}\ndiag2_edge = tensor([[ 1,-1, 0],\n                     [ 0, 1,-1],\n                     [ 0, 0, 1]]).float()\n```\n:::\n\n\n::: {#deaef07f .cell execution_count=25}\n``` {.python .cell-code}\nshow_image(diag2_edge);\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-26-output-1.png){}\n:::\n:::\n\n\nLet's create a batch of 16 images.\n\n::: {#b6ecbca7 .cell execution_count=26}\n``` {.python .cell-code}\nxb = x_imgs[:16][:, None]\nxb.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\ntorch.Size([16, 1, 28, 28])\n```\n:::\n:::\n\n\nAnd stack all our kernels together\n\n::: {#bd96fd89 .cell execution_count=27}\n``` {.python .cell-code}\nedge_kernels = torch.stack([left_edge, top_edge, diag1_edge, diag2_edge])[:, None]\nedge_kernels.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\ntorch.Size([4, 1, 3, 3])\n```\n:::\n:::\n\n\nNow, we pass the batch and kernel to `conv2d`\n\n::: {#c383b707 .cell execution_count=28}\n``` {.python .cell-code}\nbatch_features = F.conv2d(xb, edge_kernels)\nbatch_features.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\ntorch.Size([16, 4, 26, 26])\n```\n:::\n:::\n\n\nThe output indicates that we have $16$ images in the batch, $4$ filters, and each image is of dimension $26\\times26$.\n\nLet's see what the kernels detect when applied on a particular image\n\n::: {#964fffb4 .cell execution_count=29}\n``` {.python .cell-code}\nx = xb[1, 0]\nshow_image(x);\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-30-output-1.png){}\n:::\n:::\n\n\n::: {#35b7cd87 .cell execution_count=30}\n``` {.python .cell-code}\nshow_images([batch_features[1,i] for i in range(4)]);\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-31-output-1.png){}\n:::\n:::\n\n\n# Strides and Padding\n\nUsing the convolution operation, we lose some pixels from our image, effectively losing data, which is never good. Using appropriate padding, we can ensure that the output activation map is the same size as the input image.\n<img src=\"attachment:7ff7b377-afae-416d-a20d-dc70b8443b38.png\">\n>Figure 4: Padding\n\nZero padding is a common approach where the input outside the valid range is $0$. If we pad the images so that the output dimensions are the same as the input dimensions, then it's called valid padding. If we add a kernel of size $f\\times f$ (with $f$ an odd number), the necessary padding on each side to keep the same shape is $f//2$.\n\nSo far, we've seen our kernel slide over the image grid by one unit, or in other words, it has a *stride* of 1. However, a kernel can have a stride greater than $1$ as well. A stride of 2 means creating roughly half the number of outputs.\n\n<img src=\"attachment:66edf505-fd1c-4990-8987-8f36c3dfc1e7.png\">\n> Figure 5: stride-2 convolutions\n\n\nIf we have an image of size $n\\times n$, a kernel of size $f\\times f$, padding of $p$ pixels on each side, and a stride of $s$ then the output of the convolution operation will have a size of $(\\frac{n-f+2p}{s} + 1) \\times (\\frac{n-f+2p}{s} + 1)$.\n\n<img src=\"attachment:5f77f86c-fcb0-44f9-a735-f27656c91804.png\">\n> Figure 6: With a $5\\times 5$ input, $4\\times 4$ kernel, and $2$ pixels of padding, we end up with a $6\\times 6$ activation map.\n\n# Creating a CNN\n\nWe are now able to create and train a Convolutional Neural Network. But before that, let's recall how we'd build a simple one-layer MLP using `nn.Sequential`.\n\n::: {#71b64dea .cell execution_count=31}\n``` {.python .cell-code}\nn,m = x_train.shape\nc = y_train.max()+1\nnh = 50\n```\n:::\n\n\n::: {#9de8385b .cell execution_count=32}\n``` {.python .cell-code}\nmodel = nn.Sequential(nn.Linear(m,nh), nn.ReLU(), nn.Linear(nh,10))\n```\n:::\n\n\nWhat if we use the same idea to build a CNN as well.\n\n::: {#3c5cb0ad .cell execution_count=33}\n``` {.python .cell-code}\nbroken_cnn = nn.Sequential(\n    nn.Conv2d(1, 30, kernel_size=3, padding=1),\n    nn.ReLU(),\n    nn.Conv2d(30, 10, kernel_size=3, padding=1)\n)\n```\n:::\n\n\n::: {#f54e7557 .cell execution_count=34}\n``` {.python .cell-code}\nbroken_cnn(xb).shape\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```\ntorch.Size([16, 10, 28, 28])\n```\n:::\n:::\n\n\nWe want to have 10 output channels for each of the 16 images in the batch which isn't the case here.\n\nTo make our ConvNet architecture, we'll first create a `conv` function with appropriate input channels, output channels, stride, kernel size, and padding which returns a sequential model with an optional activation function.\n\n::: {#5cd05c37 .cell execution_count=35}\n``` {.python .cell-code}\ndef conv(ni, nf, ks=3, stride=2, act=True):\n    res = nn.Conv2d(ni, nf, kernel_size=ks, stride=stride, padding=ks//2)\n    if act: res = nn.Sequential(res, nn.ReLU())\n    return res\n```\n:::\n\n\nand then put those `conv` functions together to get our ConvNet architecture. The `nn.Flatten()` removes the unneccesary unit axes. The commented dimensions represent the dimensions of the output from that conv layer.\n\n::: {#ca4abd7d .cell execution_count=36}\n``` {.python .cell-code}\nsimple_cnn = nn.Sequential(\n    conv(1, 4),                 #14x14\n    conv(4, 8),                 #7x7\n    conv(8, 16),                #4x4\n    conv(16, 16),               #2x2\n    conv(16, 10, act=False),    #1x1\n    nn.Flatten()\n)\n```\n:::\n\n\n::: {#57d22c87 .cell execution_count=37}\n``` {.python .cell-code}\nsimple_cnn(xb).shape\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```\ntorch.Size([16, 10])\n```\n:::\n:::\n\n\nNow lets create our Datasets and DataLoaders to create batches for training.\n\n::: {#0a02c478 .cell execution_count=38}\n``` {.python .cell-code}\nx_imgs = x_train.view(-1, 1, 28, 28)\nxv_imgs = x_valid.view(-1, 1, 28, 28)\ntrain_ds, valid_ds = Dataset(x_imgs, y_train), Dataset(xv_imgs, y_valid)\n```\n:::\n\n\n::: {#cc025895 .cell execution_count=39}\n``` {.python .cell-code}\ndef_device = 'mps' if torch.backends.mps.is_available() else 'cuda' if torch.cuda.is_available() else 'cpu'\n\ndef to_device(x, device=def_device):\n    if isinstance(x, torch.Tensor): return x.to(device)\n    if isinstance(x, Mapping): return {k:v.to(device) for k,v in x.items()}\n    return type(x)(to_device(o, device) for o in x)\n\ndef collate_device(b): return to_device(default_collate(b))\n```\n:::\n\n\n::: {#c83bf9a5 .cell execution_count=40}\n``` {.python .cell-code}\nbs = 256\nlr = 0.4\ntrain_dl,valid_dl = get_dls(train_ds, valid_ds, bs, collate_fn=collate_device)\nopt = optim.SGD(simple_cnn.parameters(), lr=lr)\n```\n:::\n\n\nNotice that we move our model (and its parameters) to the gpu (if its available) to speed up training.\n\nWe'll be using accuracy as a metric.\n\nLet's call `fit` and train for 5 epochs.\n\n::: {#a9e8797d .cell execution_count=41}\n``` {.python .cell-code}\nloss,acc = fit(5, simple_cnn.to(def_device), F.cross_entropy, opt, train_dl, valid_dl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nepoch:0, loss:0.24606067934036255, accuracy:0.9261\nepoch:1, loss:0.3109270170092583, accuracy:0.8996\nepoch:2, loss:0.13386928861290218, accuracy:0.9614\nepoch:3, loss:0.11480410803705454, accuracy:0.9672\nepoch:4, loss:0.11073240856379271, accuracy:0.9692\n```\n:::\n:::\n\n\nand it seems to be working fine.\n\nNow let's reduce the learning rate to 0.1 and train again for 5 epochs.\n\n::: {#c36d0f0d .cell execution_count=42}\n``` {.python .cell-code}\nopt = optim.SGD(simple_cnn.parameters(), lr=lr/4)\nloss,acc = fit(5, simple_cnn.to(def_device), F.cross_entropy, opt, train_dl, valid_dl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nepoch:0, loss:0.09213317882493138, accuracy:0.9755\nepoch:1, loss:0.08902085060030222, accuracy:0.9754\nepoch:2, loss:0.09745506885498763, accuracy:0.9713\nepoch:3, loss:0.08761019644867629, accuracy:0.9751\nepoch:4, loss:0.09199669285789132, accuracy:0.9741\n```\n:::\n:::\n\n\n... and accuracy has improved to 0.97!\n\nThat was all about building and training ConvNets from the ground up. \n\n\nThankyou for reading. \n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}